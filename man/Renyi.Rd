% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Renyi.R
\name{Renyi}
\alias{Renyi}
\title{Renyi's entropy (H)}
\usage{
Renyi(
  x,
  window = 3,
  alpha = 1,
  base = exp(1),
  rasterOut = TRUE,
  np = 1,
  na.tolerance = 1,
  cluster.type = "SOCK",
  debugging = FALSE
)
}
\arguments{
\item{x}{Input data, which may be a matrix, a Spatial Grid Data Frame, a SpatRaster, or a list of these objects. 
In the latter case, only the first element of the list will be considered.}

\item{window}{The side of the square moving window; it must be an odd numeric value greater than 1 to ensure that the target pixel is in the centre of the moving window. 
Default value is 3.}

\item{alpha}{Order of diversity to compute the index. If \code{alpha} is a vector with length greater than 1, then the index will be calculated over \code{x} for each value in the sequence.}

\item{base}{A numerical value defining the base of the logarithm in Renyi's entropy formula. Default is \code{exp(1)}.}

\item{rasterOut}{Boolean; if TRUE, the output will be in SpatRaster format with \code{x} as a template.}

\item{np}{The number of processes (cores) to be spawned. Default is 1.}

\item{na.tolerance}{A numeric value between 0.0 and 1.0 indicating the proportion of NA values tolerated when calculating Renyi's index in each moving window over \code{x}. 
If the relative proportion of NAs is larger than \code{na.tolerance}, the value for that window is set as NA; otherwise, Renyi's index is calculated considering the non-NA values. Default is 1.0 (no tolerance for NAs).}

\item{cluster.type}{The type of cluster to create. Options are "MPI" (calls "makeMPIcluster"), "FORK", and "SOCK" (calls "makeCluster"). Default is "SOCK".}

\item{debugging}{Boolean; if TRUE, additional messages will be printed for debugging purposes. Default is FALSE.}
}
\value{
A list of matrices with a length equal to the length of \code{alpha}. If the length of \code{alpha} is 1, then a matrix of dimensions \code{dim(x)} is returned.
}
\description{
Computes Renyi's entropy (\deqn{H}) on different classes of numeric matrices using a moving window algorithm.
}
\details{
Renyi's entropy (\deqn{H}) is calculated on a numerical matrix as \deqn{H = \frac{1}{(1-q)} \ln(\sum_{i=1}^{R} {p^q}_i)}, where \emph{q} is the considered order of diversity (\code{alpha}), \emph{R} is the total number of categories (i.e., unique numerical values in the considered numerical matrix), and \emph{p} is the relative abundance of each category. 
If q=1, \code{Shannon.R} is called to calculate \deqn{H'} instead of the indefinite \deqn{{}^1D}. If \deqn{p > 2*10^9}, then \code{BerkgerParker.R} is called to calculate \deqn{log(1/{}^\infty H)}. Renyi's entropy of low order gives more weight to rarer categories, while higher orders weight more dominant categories.
}
\note{
For Linux users: to enable MPI parallel computing, install libopenmpi by running the following commands in the terminal: 
\code{apt-get update; apt-get upgrade; apt-get install mpi; apt-get install libopenmpi-dev; apt-get install r-cran-rmpi}.

Windows users might require additional steps to use "MPI". Refer to the detailed guide at: 
\url{https://bioinfomagician.wordpress.com/2013/11/18/installing-rmpi-mpi-for-r-on-mac-and-windows/}
}
\examples{
# Minimal example: compute Renyi's index with alpha 1:5 
a <- matrix(c(10,10,10,20,20,20,20,30,30), ncol=3, nrow=3)
renyi <- Renyi(x = a, window = 3, alpha = 1:5)

}
\references{
RÃ©nyi, A. (1970). Probability Theory. North Holland Publishing Company, Amsterdam.
}
\seealso{
\code{\link{Shannon}}, \code{\link{BergerParker}}
}
\author{
Matteo Marcantonio \email{marcantoniomatteo@gmail.com}, Martina Iannacito \email{martina.iannacito@inria.fr}, Duccio Rocchini \email{duccio.rocchini@unibo.it}
}
